(function() {var implementors = {};
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; AbsDiffEq&lt;Matrix&lt;N, R, C, S&gt;&gt; for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; AbsDiffEq&lt;Unit&lt;Matrix&lt;N, R, C, S&gt;&gt;&gt; for Unit&lt;Matrix&lt;N, R, C, S&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + AbsDiffEq, D:&nbsp;DimName&gt; AbsDiffEq&lt;Point&lt;N, D&gt;&gt; for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; AbsDiffEq&lt;Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField + AbsDiffEq&lt;Epsilon = N&gt;&gt; AbsDiffEq&lt;Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField + AbsDiffEq&lt;Epsilon = N&gt;&gt; AbsDiffEq&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; AbsDiffEq&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + AbsDiffEq, D:&nbsp;DimName&gt; AbsDiffEq&lt;Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimName, R&gt; AbsDiffEq&lt;Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt; + AbsDiffEq&lt;Epsilon = N::Epsilon&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimName, R&gt; AbsDiffEq&lt;Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt; + AbsDiffEq&lt;Epsilon = N::Epsilon&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; AbsDiffEq&lt;Transform&lt;N, D, C&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C, T&gt; AbsDiffEq&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AbsDiffEq&lt;Epsilon = T::Epsilon&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AbsDiffEq + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; AbsDiffEq&lt;Range&lt;T&gt;&gt; for Range&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AbsDiffEq + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;C, T&gt; AbsDiffEq&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: AbsDiffEq&lt;Epsilon = T::Epsilon&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; AbsDiffEq&lt;Hsl&lt;S, T&gt;&gt; for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; AbsDiffEq&lt;Hsv&lt;S, T&gt;&gt; for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; AbsDiffEq&lt;Hwb&lt;S, T&gt;&gt; for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; AbsDiffEq&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; AbsDiffEq&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; AbsDiffEq&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; AbsDiffEq&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; AbsDiffEq&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; AbsDiffEq&lt;Lch&lt;Wp, T&gt;&gt; for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + AbsDiffEq,<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Copy + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint + PartialEq,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + AbsDiffEq&gt; AbsDiffEq&lt;LabHue&lt;T&gt;&gt; for LabHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Float,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + AbsDiffEq&gt; AbsDiffEq&lt;RgbHue&lt;T&gt;&gt; for RgbHue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T::Epsilon: Float,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()