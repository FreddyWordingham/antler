(function() {var implementors = {};
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; Mul&lt;N&gt; for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; Mul&lt;N&gt; for &amp;'a Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Storage&lt;N, R, C&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u8, R, C&gt;&gt; Mul&lt;Matrix&lt;u8, R, C, S&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u8, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u8, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;u8, R, C, S&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u8, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u16, R, C&gt;&gt; Mul&lt;Matrix&lt;u16, R, C, S&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u16, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u16, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;u16, R, C, S&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u16, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u32, R, C&gt;&gt; Mul&lt;Matrix&lt;u32, R, C, S&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u32, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u32, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;u32, R, C, S&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u32, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u64, R, C&gt;&gt; Mul&lt;Matrix&lt;u64, R, C, S&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u64, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;u64, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;u64, R, C, S&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u64, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;usize, R, C&gt;&gt; Mul&lt;Matrix&lt;usize, R, C, S&gt;&gt; for usize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;usize, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;usize, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;usize, R, C, S&gt;&gt; for usize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;usize, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i8, R, C&gt;&gt; Mul&lt;Matrix&lt;i8, R, C, S&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i8, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i8, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;i8, R, C, S&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i8, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i16, R, C&gt;&gt; Mul&lt;Matrix&lt;i16, R, C, S&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i16, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i16, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;i16, R, C, S&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i16, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i32, R, C&gt;&gt; Mul&lt;Matrix&lt;i32, R, C, S&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i32, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i32, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;i32, R, C, S&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i32, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i64, R, C&gt;&gt; Mul&lt;Matrix&lt;i64, R, C, S&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i64, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;i64, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;i64, R, C, S&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i64, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;isize, R, C&gt;&gt; Mul&lt;Matrix&lt;isize, R, C, S&gt;&gt; for isize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;isize, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;isize, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;isize, R, C, S&gt;&gt; for isize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;isize, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;f32, R, C&gt;&gt; Mul&lt;Matrix&lt;f32, R, C, S&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f32, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;f32, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;f32, R, C, S&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f32, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;f64, R, C&gt;&gt; Mul&lt;Matrix&lt;f64, R, C, S&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f64, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, R:&nbsp;Dim, C:&nbsp;Dim, S:&nbsp;Storage&lt;f64, R, C&gt;&gt; Mul&lt;&amp;'b Matrix&lt;f64, R, C, S&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f64, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;Dim, C1:&nbsp;Dim, R2:&nbsp;Dim, C2:&nbsp;Dim, SA, SB&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: Storage&lt;N, R1, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Point&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Point&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Point&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1:&nbsp;DimName, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Point&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, U1&gt; + Allocator&lt;N, R1, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + ClosedMul, D:&nbsp;DimName&gt; Mul&lt;N&gt; for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar + ClosedMul, D:&nbsp;DimName&gt; Mul&lt;N&gt; for &amp;'a Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;u8, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u8, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;u8, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u8, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;u16, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u16, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;u16, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u16, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;u32, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u32, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;u32, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u32, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;u64, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u64, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;u64, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;u64, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;usize, D&gt;&gt; for usize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;usize, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;usize, D&gt;&gt; for usize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;usize, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;i8, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i8, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;i8, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i8, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;i16, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i16, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;i16, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i16, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;i32, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i32, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;i32, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i32, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;i64, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i64, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;i64, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;i64, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;isize, D&gt;&gt; for isize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;isize, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;isize, D&gt;&gt; for isize <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;isize, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;f32, D&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f32, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;f32, D&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f32, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;DimName&gt; Mul&lt;Point&lt;f64, D&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f64, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;f64, D&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;f64, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D1:&nbsp;DimName, R2:&nbsp;Dim, C2:&nbsp;Dim, SB:&nbsp;Storage&lt;N, R2, C2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, R2, C2, SB&gt;&gt; for &amp;'a Rotation&lt;N, D1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, D1&gt; + Allocator&lt;N, R2, C2&gt; + Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D1, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D1, D1, R2, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Rotation&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;Rotation&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D2&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, R1:&nbsp;Dim, C1:&nbsp;Dim, D2:&nbsp;DimName, SA:&nbsp;Storage&lt;N, R1, C1&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D2&gt;&gt; for &amp;'a Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, D2, D2&gt; + Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, D2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, D2, D2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName, S:&nbsp;Storage&lt;N, D&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, S&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;D, D, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Quaternion&lt;N&gt;&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Quaternion&lt;N&gt;&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Rotation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U3, U1, SB&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Matrix&lt;N, U3, U1, SB&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U3, U1, SB&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Matrix&lt;N, U3, U1, SB&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, SB:&nbsp;Storage&lt;N, U3&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U3, U1, SB&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;N&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;N&gt; for &amp;'a Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Mul&lt;Quaternion&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b Quaternion&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Mul&lt;Quaternion&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;'b&gt; Mul&lt;&amp;'b Quaternion&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Rotation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Rotation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Point&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Point&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Matrix&lt;N, U2, U1, S&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Matrix&lt;N, U2, U1, S&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U2, U1, S&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Matrix&lt;N, U2, U1, S&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, S:&nbsp;Storage&lt;N, U2&gt;&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, U2, U1, S&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U2, Unit&lt;Complex&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U2&gt;&gt; for &amp;'a UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + SameShapeAllocator&lt;N, D, U1, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D, Representative = D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Unit&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Translation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Translation&lt;N, U3&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Isometry&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Translation&lt;N, U3&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField, D:&nbsp;DimName&gt; Mul&lt;&amp;'b Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Similarity&lt;N, U3, Unit&lt;Quaternion&lt;N&gt;&gt;&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;SimdRealField&gt; Mul&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N:&nbsp;SimdRealField&gt; Mul&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for &amp;'a Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Matrix&lt;N, D, U1, &lt;DefaultAllocator as Allocator&lt;N, D, U1&gt;&gt;::Buffer&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Point&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;Point&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; Mul&lt;&amp;'b Point&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;Transform&lt;N, D, CB&gt;&gt; for Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;Transform&lt;N, D, CB&gt;&gt; for &amp;'a Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;&amp;'b Transform&lt;N, D, CB&gt;&gt; for Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategoryMul&lt;CB&gt;, CB:&nbsp;TCategory&gt; Mul&lt;&amp;'b Transform&lt;N, D, CB&gt;&gt; for &amp;'a Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Rotation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for &amp;'a Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, U3, C&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, U3, C&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, U3, C&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, U3, C&gt;&gt; for &amp;'a UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U4, U4&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Isometry&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Similarity&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Translation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Translation&lt;N, D&gt;&gt; for &amp;'a Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;Transform&lt;N, D, C&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategoryMul&lt;TAffine&gt;&gt; Mul&lt;&amp;'b Transform&lt;N, D, C&gt;&gt; for &amp;'a Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I&gt; Mul&lt;Dim&lt;I&gt;&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; Mul&lt;usize&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, B, S, S2, D, E&gt; Mul&lt;ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Mul&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B, S, S2, D, E&gt; Mul&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Mul&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, B, S, S2, D, E&gt; Mul&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Mul&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = B&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S, D, B&gt; Mul&lt;B&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Mul&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = A&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ScalarOperand,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, D, B&gt; Mul&lt;B&gt; for &amp;'a ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + Mul&lt;B, Output = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: ScalarOperand,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i8&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u8&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u8 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u8&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i16&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u16&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u16 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u16&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for i128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = i128&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for i128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = i128&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for u128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = u128&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for u128 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = u128&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = f32&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for f32 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = f32&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = f64&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for f64 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = f64&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = Complex&lt;f32&gt;&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f32&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = Complex&lt;f32&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, D&gt; Mul&lt;ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f64&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataOwned&lt;Elem = Complex&lt;f64&gt;&gt; + DataMut,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, S, D&gt; Mul&lt;&amp;'a ArrayBase&lt;S, D&gt;&gt; for Complex&lt;f64&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Data&lt;Elem = Complex&lt;f64&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["noisy_float"] = [{"text":"impl&lt;F:&nbsp;Float, C:&nbsp;FloatChecker&lt;F&gt;&gt; Mul&lt;F&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float, C:&nbsp;FloatChecker&lt;F&gt;&gt; Mul&lt;&amp;'a F&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Float, C:&nbsp;FloatChecker&lt;F&gt;&gt; Mul&lt;NoisyFloat&lt;F, C&gt;&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float, C:&nbsp;FloatChecker&lt;F&gt;&gt; Mul&lt;&amp;'a NoisyFloat&lt;F, C&gt;&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'b Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;Complex&lt;T&gt;&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Mul&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Num&gt; Mul&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Num&gt; Mul&lt;T&gt; for &amp;'a Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Num&gt; Mul&lt;&amp;'a T&gt; for &amp;'b Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;usize&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;usize&gt;&gt; for &amp;'a usize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;usize&gt;&gt; for &amp;'b usize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;u8&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;u8&gt;&gt; for &amp;'a u8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;u8&gt;&gt; for &amp;'b u8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;u16&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;u16&gt;&gt; for &amp;'a u16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;u16&gt;&gt; for &amp;'b u16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;u32&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;u32&gt;&gt; for &amp;'a u32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;u32&gt;&gt; for &amp;'b u32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;u64&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;u64&gt;&gt; for &amp;'a u64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;u64&gt;&gt; for &amp;'b u64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;u128&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;u128&gt;&gt; for &amp;'a u128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;u128&gt;&gt; for &amp;'b u128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;isize&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;isize&gt;&gt; for &amp;'a isize","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;isize&gt;&gt; for &amp;'b isize","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;i8&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;i8&gt;&gt; for &amp;'a i8","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;i8&gt;&gt; for &amp;'b i8","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;i16&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;i16&gt;&gt; for &amp;'a i16","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;i16&gt;&gt; for &amp;'b i16","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;i32&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;i32&gt;&gt; for &amp;'a i32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;i32&gt;&gt; for &amp;'b i32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;i64&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;i64&gt;&gt; for &amp;'a i64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;i64&gt;&gt; for &amp;'b i64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;i128&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;i128&gt;&gt; for &amp;'a i128","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;i128&gt;&gt; for &amp;'b i128","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;f32&gt;&gt; for &amp;'a f32","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;f32&gt;&gt; for &amp;'b f32","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;&amp;'a Complex&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Mul&lt;Complex&lt;f64&gt;&gt; for &amp;'a f64","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Mul&lt;&amp;'a Complex&lt;f64&gt;&gt; for &amp;'b f64","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;usize&gt;&gt; for usize","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;u8&gt;&gt; for u8","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;u16&gt;&gt; for u16","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;u32&gt;&gt; for u32","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;u64&gt;&gt; for u64","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;u128&gt;&gt; for u128","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;isize&gt;&gt; for isize","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;i8&gt;&gt; for i8","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;i16&gt;&gt; for i16","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;i32&gt;&gt; for i32","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;i64&gt;&gt; for i64","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;i128&gt;&gt; for i128","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;f32&gt;&gt; for f32","synthetic":false,"types":[]},{"text":"impl Mul&lt;Complex&lt;f64&gt;&gt; for f64","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Mul&lt;&amp;'b Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T:&nbsp;Clone + Integer&gt; Mul&lt;&amp;'b T&gt; for &amp;'a Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;Ratio&lt;T&gt;&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;T&gt; for &amp;'a Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Mul&lt;&amp;'a T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;T&gt; for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone + Integer,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C:&nbsp;Mul, T:&nbsp;Float&gt; Mul&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float, C:&nbsp;Mul&lt;T&gt;&gt; Mul&lt;T&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Mul, T:&nbsp;Float&gt; Mul&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Mul + Clone, C:&nbsp;Mul&lt;T&gt;&gt; Mul&lt;T&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Mul&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Mul&lt;T&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Mul&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Mul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Mul&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Mul&lt;T&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Mul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Mul&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Mul&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Mul,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Mul&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Mul&lt;T&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Mul,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as Mul&gt;::Output: Component,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Mul&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Mul&lt;T&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Mul&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Mul&lt;T&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;T&gt; Mul&lt;T&gt; for RGB&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;T&gt; for RGBA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;T&gt; for Gray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Mul&lt;T&gt; for GrayAlpha&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["simba"] = [{"text":"impl Mul&lt;AutoSimd&lt;[f32; 2]&gt;&gt; for AutoSimd&lt;[f32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[f32; 4]&gt;&gt; for AutoSimd&lt;[f32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[f32; 8]&gt;&gt; for AutoSimd&lt;[f32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[f32; 16]&gt;&gt; for AutoSimd&lt;[f32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[f64; 2]&gt;&gt; for AutoSimd&lt;[f64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[f64; 4]&gt;&gt; for AutoSimd&lt;[f64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[f64; 8]&gt;&gt; for AutoSimd&lt;[f64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i128; 1]&gt;&gt; for AutoSimd&lt;[i128; 1]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i128; 2]&gt;&gt; for AutoSimd&lt;[i128; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i128; 4]&gt;&gt; for AutoSimd&lt;[i128; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i16; 2]&gt;&gt; for AutoSimd&lt;[i16; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i16; 4]&gt;&gt; for AutoSimd&lt;[i16; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i16; 8]&gt;&gt; for AutoSimd&lt;[i16; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i16; 16]&gt;&gt; for AutoSimd&lt;[i16; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i16; 32]&gt;&gt; for AutoSimd&lt;[i16; 32]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i32; 2]&gt;&gt; for AutoSimd&lt;[i32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i32; 4]&gt;&gt; for AutoSimd&lt;[i32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i32; 8]&gt;&gt; for AutoSimd&lt;[i32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i32; 16]&gt;&gt; for AutoSimd&lt;[i32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i64; 2]&gt;&gt; for AutoSimd&lt;[i64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i64; 4]&gt;&gt; for AutoSimd&lt;[i64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i64; 8]&gt;&gt; for AutoSimd&lt;[i64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i8; 2]&gt;&gt; for AutoSimd&lt;[i8; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i8; 4]&gt;&gt; for AutoSimd&lt;[i8; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i8; 8]&gt;&gt; for AutoSimd&lt;[i8; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i8; 16]&gt;&gt; for AutoSimd&lt;[i8; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[i8; 32]&gt;&gt; for AutoSimd&lt;[i8; 32]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[isize; 2]&gt;&gt; for AutoSimd&lt;[isize; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[isize; 4]&gt;&gt; for AutoSimd&lt;[isize; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[isize; 8]&gt;&gt; for AutoSimd&lt;[isize; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u128; 1]&gt;&gt; for AutoSimd&lt;[u128; 1]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u128; 2]&gt;&gt; for AutoSimd&lt;[u128; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u128; 4]&gt;&gt; for AutoSimd&lt;[u128; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u16; 2]&gt;&gt; for AutoSimd&lt;[u16; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u16; 4]&gt;&gt; for AutoSimd&lt;[u16; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u16; 8]&gt;&gt; for AutoSimd&lt;[u16; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u16; 16]&gt;&gt; for AutoSimd&lt;[u16; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u16; 32]&gt;&gt; for AutoSimd&lt;[u16; 32]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u32; 2]&gt;&gt; for AutoSimd&lt;[u32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u32; 4]&gt;&gt; for AutoSimd&lt;[u32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u32; 8]&gt;&gt; for AutoSimd&lt;[u32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u32; 16]&gt;&gt; for AutoSimd&lt;[u32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u64; 2]&gt;&gt; for AutoSimd&lt;[u64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u64; 4]&gt;&gt; for AutoSimd&lt;[u64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u64; 8]&gt;&gt; for AutoSimd&lt;[u64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u8; 2]&gt;&gt; for AutoSimd&lt;[u8; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u8; 4]&gt;&gt; for AutoSimd&lt;[u8; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u8; 8]&gt;&gt; for AutoSimd&lt;[u8; 8]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u8; 16]&gt;&gt; for AutoSimd&lt;[u8; 16]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[u8; 32]&gt;&gt; for AutoSimd&lt;[u8; 32]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[usize; 2]&gt;&gt; for AutoSimd&lt;[usize; 2]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[usize; 4]&gt;&gt; for AutoSimd&lt;[usize; 4]&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;AutoSimd&lt;[usize; 8]&gt;&gt; for AutoSimd&lt;[usize; 8]&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl&lt;I:&nbsp;Integer&gt; Mul&lt;I&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Mul&lt;Z0&gt; for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned + NonZero&gt; Mul&lt;Z0&gt; for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;PInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;NInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;NInt&lt;Ur&gt;&gt; for PInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned + NonZero, Ur:&nbsp;Unsigned + NonZero&gt; Mul&lt;PInt&lt;Ur&gt;&gt; for NInt&lt;Ul&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;Ur&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Ul as Mul&lt;Ur&gt;&gt;::Output: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Mul&lt;B0&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Mul&lt;B0&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl Mul&lt;B1&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Mul&lt;B1&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned, B:&nbsp;Bit&gt; Mul&lt;UTerm&gt; for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Unsigned&gt; Mul&lt;U&gt; for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, B:&nbsp;Bit, Ur:&nbsp;Unsigned&gt; Mul&lt;UInt&lt;Ur, B&gt;&gt; for UInt&lt;Ul, B0&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;UInt&lt;Ur, B&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Ul:&nbsp;Unsigned, B:&nbsp;Bit, Ur:&nbsp;Unsigned&gt; Mul&lt;UInt&lt;Ur, B&gt;&gt; for UInt&lt;Ul, B1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Ul: Mul&lt;UInt&lt;Ur, B&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;UInt&lt;Prod&lt;Ul, UInt&lt;Ur, B&gt;&gt;, B0&gt;: Add&lt;UInt&lt;Ur, B&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Rhs&gt; Mul&lt;Rhs&gt; for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V, A, Rhs&gt; Mul&lt;Rhs&gt; for TArr&lt;V, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;V: Mul&lt;Rhs&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Mul&lt;Rhs&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rhs: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Mul&lt;ATerm&gt; for Z0","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; Mul&lt;ATerm&gt; for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;U&gt; Mul&lt;ATerm&gt; for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;V, A&gt; Mul&lt;TArr&lt;V, A&gt;&gt; for Z0 <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Z0: Mul&lt;A&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;V, A, U&gt; Mul&lt;TArr&lt;V, A&gt;&gt; for PInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,<br>&nbsp;&nbsp;&nbsp;&nbsp;PInt&lt;U&gt;: Mul&lt;A&gt; + Mul&lt;V&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;V, A, U&gt; Mul&lt;TArr&lt;V, A&gt;&gt; for NInt&lt;U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Unsigned + NonZero,<br>&nbsp;&nbsp;&nbsp;&nbsp;NInt&lt;U&gt;: Mul&lt;A&gt; + Mul&lt;V&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()