(function() {var implementors = {};
implementors["nalgebra"] = [{"text":"impl&lt;N, R:&nbsp;Dim, C:&nbsp;Dim, S&gt; MulAssign&lt;N&gt; for Matrix&lt;N, R, C, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: StorageMut&lt;N, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1, C1, R2, SA, SB&gt; MulAssign&lt;Matrix&lt;N, R2, C1, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: ContiguousStorageMut&lt;N, R1, C1&gt; + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1, Buffer = SA&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1, C1, R2, SA, SB&gt; MulAssign&lt;&amp;'b Matrix&lt;N, R2, C1, SB&gt;&gt; for Matrix&lt;N, R1, C1, SA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;SB: Storage&lt;N, R2, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;SA: ContiguousStorageMut&lt;N, R1, C1&gt; + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: AreMultipliable&lt;R1, C1, R2, C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1, Buffer = SA&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + ClosedMul, D:&nbsp;DimName&gt; MulAssign&lt;N&gt; for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; MulAssign&lt;Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; MulAssign&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, R1:&nbsp;DimName, C1:&nbsp;DimName&gt; MulAssign&lt;Rotation&lt;N, C1&gt;&gt; for MatrixMN&lt;N, R1, C1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, C1, C1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, R1:&nbsp;DimName, C1:&nbsp;DimName&gt; MulAssign&lt;&amp;'b Rotation&lt;N, C1&gt;&gt; for MatrixMN&lt;N, R1, C1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R1, C1&gt; + Allocator&lt;N, C1, C1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;N&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; MulAssign&lt;&amp;'b Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;Quaternion&lt;N&gt;&gt; for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; MulAssign&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; MulAssign&lt;&amp;'b Rotation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;Rotation&lt;N, U3&gt;&gt; for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U1&gt; + Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; MulAssign&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;Rotation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; MulAssign&lt;&amp;'b Rotation&lt;N, U2&gt;&gt; for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; MulAssign&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField&gt; MulAssign&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Rotation&lt;N, U2&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; MulAssign&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; MulAssign&lt;Translation&lt;N, D&gt;&gt; for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + ClosedAdd,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;D, D&gt; + SameNumberOfColumns&lt;U1, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;Translation&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; MulAssign&lt;Rotation&lt;N, D&gt;&gt; for Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; MulAssign&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Isometry&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; MulAssign&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N&gt; MulAssign&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Isometry&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; MulAssign&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N&gt; MulAssign&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Isometry&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;Translation&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;Isometry&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; MulAssign&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimName&gt; MulAssign&lt;Rotation&lt;N, D&gt;&gt; for Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimName&gt; MulAssign&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Similarity&lt;N, D, Rotation&lt;N, D&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, U1&gt; + Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; MulAssign&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N&gt; MulAssign&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Similarity&lt;N, U3, UnitQuaternion&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U3, U3&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N&gt; MulAssign&lt;Unit&lt;Complex&lt;N&gt;&gt;&gt; for Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N&gt; MulAssign&lt;&amp;'b Unit&lt;Complex&lt;N&gt;&gt;&gt; for Similarity&lt;N, U2, UnitComplex&lt;N&gt;&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U2, U2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategory, CB:&nbsp;SubTCategoryOf&lt;CA&gt;&gt; MulAssign&lt;Transform&lt;N, D, CB&gt;&gt; for Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, CA:&nbsp;TCategory, CB:&nbsp;SubTCategoryOf&lt;CA&gt;&gt; MulAssign&lt;&amp;'b Transform&lt;N, D, CB&gt;&gt; for Transform&lt;N, D, CA&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; MulAssign&lt;Similarity&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; MulAssign&lt;&amp;'b Similarity&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; MulAssign&lt;Isometry&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory, R:&nbsp;SubsetOf&lt;MatrixN&lt;N, DimNameSum&lt;D, U1&gt;&gt;&gt;&gt; MulAssign&lt;&amp;'b Isometry&lt;N, D, R&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; MulAssign&lt;Translation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; MulAssign&lt;&amp;'b Translation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; MulAssign&lt;Rotation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, D:&nbsp;DimNameAdd&lt;U1&gt;, C:&nbsp;TCategory&gt; MulAssign&lt;&amp;'b Rotation&lt;N, D&gt;&gt; for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, C:&nbsp;TCategory&gt; MulAssign&lt;Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'b, N, C:&nbsp;TCategory&gt; MulAssign&lt;&amp;'b Unit&lt;Quaternion&lt;N&gt;&gt;&gt; for Transform&lt;N, U3, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + Zero + One + ClosedAdd + ClosedMul + RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, U4, U4&gt; + Allocator&lt;N, U4, U1&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl&lt;I&gt; MulAssign&lt;Dim&lt;I&gt;&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I&gt; MulAssign&lt;&amp;'a Dim&lt;I&gt;&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I&gt; MulAssign&lt;usize&gt; for Dim&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Dim&lt;I&gt;: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, A, S, S2, D, E&gt; MulAssign&lt;&amp;'a ArrayBase&lt;S2, E&gt;&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Clone + MulAssign&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataMut&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S2: Data&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A, S, D&gt; MulAssign&lt;A&gt; for ArrayBase&lt;S, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: ScalarOperand + MulAssign&lt;A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: DataMut&lt;Elem = A&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["noisy_float"] = [{"text":"impl&lt;F:&nbsp;Float + MulAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; MulAssign&lt;F&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float + MulAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; MulAssign&lt;&amp;'a F&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Float + MulAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; MulAssign&lt;NoisyFloat&lt;F, C&gt;&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, F:&nbsp;Float + MulAssign, C:&nbsp;FloatChecker&lt;F&gt;&gt; MulAssign&lt;&amp;'a NoisyFloat&lt;F, C&gt;&gt; for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + NumAssign&gt; MulAssign&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + NumAssign&gt; MulAssign&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + NumAssign&gt; MulAssign&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + NumAssign&gt; MulAssign&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; MulAssign&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; MulAssign&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; MulAssign&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; MulAssign&lt;&amp;'a T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl&lt;C:&nbsp;MulAssign, T:&nbsp;Float + MulAssign&gt; MulAssign&lt;PreAlpha&lt;C, T&gt;&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Float + MulAssign, C:&nbsp;MulAssign&lt;T&gt;&gt; MulAssign&lt;T&gt; for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;MulAssign, T:&nbsp;Float + MulAssign&gt; MulAssign&lt;Alpha&lt;C, T&gt;&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;MulAssign + Copy, C:&nbsp;MulAssign&lt;T&gt;&gt; MulAssign&lt;T&gt; for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; MulAssign&lt;Lab&lt;Wp, T&gt;&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; MulAssign&lt;T&gt; for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; MulAssign&lt;Luma&lt;S, T&gt;&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; MulAssign&lt;T&gt; for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard&lt;TransferFn = LinearFn&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; MulAssign&lt;Rgb&lt;S, T&gt;&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + MulAssign,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; MulAssign&lt;T&gt; for Rgb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbStandard&lt;TransferFn = LinearFn&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + MulAssign,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; MulAssign&lt;Xyz&lt;Wp, T&gt;&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; MulAssign&lt;T&gt; for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; MulAssign&lt;Yxy&lt;Wp, T&gt;&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; MulAssign&lt;T&gt; for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float + MulAssign,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;T&gt; MulAssign&lt;T&gt; for RGB&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; MulAssign&lt;T&gt; for RGBA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; MulAssign&lt;T&gt; for Gray&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; MulAssign&lt;T&gt; for GrayAlpha&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Mul&lt;Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["simba"] = [{"text":"impl MulAssign&lt;AutoSimd&lt;[f32; 2]&gt;&gt; for AutoSimd&lt;[f32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[f32; 4]&gt;&gt; for AutoSimd&lt;[f32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[f32; 8]&gt;&gt; for AutoSimd&lt;[f32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[f32; 16]&gt;&gt; for AutoSimd&lt;[f32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[f64; 2]&gt;&gt; for AutoSimd&lt;[f64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[f64; 4]&gt;&gt; for AutoSimd&lt;[f64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[f64; 8]&gt;&gt; for AutoSimd&lt;[f64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i128; 1]&gt;&gt; for AutoSimd&lt;[i128; 1]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i128; 2]&gt;&gt; for AutoSimd&lt;[i128; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i128; 4]&gt;&gt; for AutoSimd&lt;[i128; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i16; 2]&gt;&gt; for AutoSimd&lt;[i16; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i16; 4]&gt;&gt; for AutoSimd&lt;[i16; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i16; 8]&gt;&gt; for AutoSimd&lt;[i16; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i16; 16]&gt;&gt; for AutoSimd&lt;[i16; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i16; 32]&gt;&gt; for AutoSimd&lt;[i16; 32]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i32; 2]&gt;&gt; for AutoSimd&lt;[i32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i32; 4]&gt;&gt; for AutoSimd&lt;[i32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i32; 8]&gt;&gt; for AutoSimd&lt;[i32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i32; 16]&gt;&gt; for AutoSimd&lt;[i32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i64; 2]&gt;&gt; for AutoSimd&lt;[i64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i64; 4]&gt;&gt; for AutoSimd&lt;[i64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i64; 8]&gt;&gt; for AutoSimd&lt;[i64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i8; 2]&gt;&gt; for AutoSimd&lt;[i8; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i8; 4]&gt;&gt; for AutoSimd&lt;[i8; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i8; 8]&gt;&gt; for AutoSimd&lt;[i8; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i8; 16]&gt;&gt; for AutoSimd&lt;[i8; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[i8; 32]&gt;&gt; for AutoSimd&lt;[i8; 32]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[isize; 2]&gt;&gt; for AutoSimd&lt;[isize; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[isize; 4]&gt;&gt; for AutoSimd&lt;[isize; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[isize; 8]&gt;&gt; for AutoSimd&lt;[isize; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u128; 1]&gt;&gt; for AutoSimd&lt;[u128; 1]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u128; 2]&gt;&gt; for AutoSimd&lt;[u128; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u128; 4]&gt;&gt; for AutoSimd&lt;[u128; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u16; 2]&gt;&gt; for AutoSimd&lt;[u16; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u16; 4]&gt;&gt; for AutoSimd&lt;[u16; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u16; 8]&gt;&gt; for AutoSimd&lt;[u16; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u16; 16]&gt;&gt; for AutoSimd&lt;[u16; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u16; 32]&gt;&gt; for AutoSimd&lt;[u16; 32]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u32; 2]&gt;&gt; for AutoSimd&lt;[u32; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u32; 4]&gt;&gt; for AutoSimd&lt;[u32; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u32; 8]&gt;&gt; for AutoSimd&lt;[u32; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u32; 16]&gt;&gt; for AutoSimd&lt;[u32; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u64; 2]&gt;&gt; for AutoSimd&lt;[u64; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u64; 4]&gt;&gt; for AutoSimd&lt;[u64; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u64; 8]&gt;&gt; for AutoSimd&lt;[u64; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u8; 2]&gt;&gt; for AutoSimd&lt;[u8; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u8; 4]&gt;&gt; for AutoSimd&lt;[u8; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u8; 8]&gt;&gt; for AutoSimd&lt;[u8; 8]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u8; 16]&gt;&gt; for AutoSimd&lt;[u8; 16]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[u8; 32]&gt;&gt; for AutoSimd&lt;[u8; 32]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[usize; 2]&gt;&gt; for AutoSimd&lt;[usize; 2]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[usize; 4]&gt;&gt; for AutoSimd&lt;[usize; 4]&gt;","synthetic":false,"types":[]},{"text":"impl MulAssign&lt;AutoSimd&lt;[usize; 8]&gt;&gt; for AutoSimd&lt;[usize; 8]&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()