(function() {var implementors = {};
implementors["atty"] = [{"text":"impl Copy for Stream","synthetic":false,"types":[]}];
implementors["bytemuck"] = [{"text":"impl Copy for PodCastError","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Copy for BigEndian","synthetic":false,"types":[]},{"text":"impl Copy for LittleEndian","synthetic":false,"types":[]}];
implementors["colored"] = [{"text":"impl Copy for Color","synthetic":false,"types":[]},{"text":"impl Copy for Style","synthetic":false,"types":[]},{"text":"impl Copy for Styles","synthetic":false,"types":[]}];
implementors["console"] = [{"text":"impl Copy for TermTarget","synthetic":false,"types":[]},{"text":"impl Copy for TermFamily","synthetic":false,"types":[]},{"text":"impl Copy for Color","synthetic":false,"types":[]},{"text":"impl Copy for Attribute","synthetic":false,"types":[]},{"text":"impl Copy for Alignment","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b&gt; Copy for Emoji&lt;'a, 'b&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_channel"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for TrySendError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for SendTimeoutError&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for RecvError","synthetic":false,"types":[]},{"text":"impl Copy for TryRecvError","synthetic":false,"types":[]},{"text":"impl Copy for RecvTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TrySelectError","synthetic":false,"types":[]},{"text":"impl Copy for SelectTimeoutError","synthetic":false,"types":[]},{"text":"impl Copy for TryReadyError","synthetic":false,"types":[]},{"text":"impl Copy for ReadyTimeoutError","synthetic":false,"types":[]}];
implementors["crossbeam_deque"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Steal&lt;T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_epoch"] = [{"text":"impl&lt;T:&nbsp;?Sized + Pointable, '_&gt; Copy for Shared&lt;'_, T&gt;","synthetic":false,"types":[]}];
implementors["crossbeam_utils"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for CachePadded&lt;T&gt;","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Copy for Compression","synthetic":false,"types":[]},{"text":"impl Copy for SpecialOptions","synthetic":false,"types":[]},{"text":"impl Copy for CompressionOptions","synthetic":false,"types":[]},{"text":"impl Copy for MatchingType","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Copy, R:&nbsp;Copy&gt; Copy for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["generic_array"] = [{"text":"impl&lt;T:&nbsp;Copy, N&gt; Copy for GenericArray&lt;T, N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: ArrayLength&lt;T&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::ArrayType: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Copy for FromHexError","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Copy for DIR","synthetic":false,"types":[]},{"text":"impl Copy for group","synthetic":false,"types":[]},{"text":"impl Copy for utimbuf","synthetic":false,"types":[]},{"text":"impl Copy for timeval","synthetic":false,"types":[]},{"text":"impl Copy for timespec","synthetic":false,"types":[]},{"text":"impl Copy for rlimit","synthetic":false,"types":[]},{"text":"impl Copy for rusage","synthetic":false,"types":[]},{"text":"impl Copy for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Copy for hostent","synthetic":false,"types":[]},{"text":"impl Copy for iovec","synthetic":false,"types":[]},{"text":"impl Copy for pollfd","synthetic":false,"types":[]},{"text":"impl Copy for winsize","synthetic":false,"types":[]},{"text":"impl Copy for linger","synthetic":false,"types":[]},{"text":"impl Copy for sigval","synthetic":false,"types":[]},{"text":"impl Copy for itimerval","synthetic":false,"types":[]},{"text":"impl Copy for tms","synthetic":false,"types":[]},{"text":"impl Copy for servent","synthetic":false,"types":[]},{"text":"impl Copy for protoent","synthetic":false,"types":[]},{"text":"impl Copy for FILE","synthetic":false,"types":[]},{"text":"impl Copy for fpos_t","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Copy for passwd","synthetic":false,"types":[]},{"text":"impl Copy for ifaddrs","synthetic":false,"types":[]},{"text":"impl Copy for fd_set","synthetic":false,"types":[]},{"text":"impl Copy for tm","synthetic":false,"types":[]},{"text":"impl Copy for msghdr","synthetic":false,"types":[]},{"text":"impl Copy for cmsghdr","synthetic":false,"types":[]},{"text":"impl Copy for fsid_t","synthetic":false,"types":[]},{"text":"impl Copy for if_nameindex","synthetic":false,"types":[]},{"text":"impl Copy for regex_t","synthetic":false,"types":[]},{"text":"impl Copy for regmatch_t","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Copy for utsname","synthetic":false,"types":[]},{"text":"impl Copy for timezone","synthetic":false,"types":[]},{"text":"impl Copy for ip_mreq","synthetic":false,"types":[]},{"text":"impl Copy for aiocb","synthetic":false,"types":[]},{"text":"impl Copy for glob_t","synthetic":false,"types":[]},{"text":"impl Copy for addrinfo","synthetic":false,"types":[]},{"text":"impl Copy for mach_timebase_info","synthetic":false,"types":[]},{"text":"impl Copy for stat","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Copy for siginfo_t","synthetic":false,"types":[]},{"text":"impl Copy for sigaction","synthetic":false,"types":[]},{"text":"impl Copy for stack_t","synthetic":false,"types":[]},{"text":"impl Copy for fstore_t","synthetic":false,"types":[]},{"text":"impl Copy for radvisory","synthetic":false,"types":[]},{"text":"impl Copy for statvfs","synthetic":false,"types":[]},{"text":"impl Copy for Dl_info","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Copy for kevent64_s","synthetic":false,"types":[]},{"text":"impl Copy for dqblk","synthetic":false,"types":[]},{"text":"impl Copy for if_msghdr","synthetic":false,"types":[]},{"text":"impl Copy for termios","synthetic":false,"types":[]},{"text":"impl Copy for flock","synthetic":false,"types":[]},{"text":"impl Copy for sf_hdtr","synthetic":false,"types":[]},{"text":"impl Copy for lconv","synthetic":false,"types":[]},{"text":"impl Copy for proc_taskinfo","synthetic":false,"types":[]},{"text":"impl Copy for proc_bsdinfo","synthetic":false,"types":[]},{"text":"impl Copy for proc_taskallinfo","synthetic":false,"types":[]},{"text":"impl Copy for xsw_usage","synthetic":false,"types":[]},{"text":"impl Copy for xucred","synthetic":false,"types":[]},{"text":"impl Copy for mach_header","synthetic":false,"types":[]},{"text":"impl Copy for mach_header_64","synthetic":false,"types":[]},{"text":"impl Copy for segment_command","synthetic":false,"types":[]},{"text":"impl Copy for segment_command_64","synthetic":false,"types":[]},{"text":"impl Copy for load_command","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_dl","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_inarp","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_ctl","synthetic":false,"types":[]},{"text":"impl Copy for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Copy for ipc_perm","synthetic":false,"types":[]},{"text":"impl Copy for sembuf","synthetic":false,"types":[]},{"text":"impl Copy for arphdr","synthetic":false,"types":[]},{"text":"impl Copy for in_addr","synthetic":false,"types":[]},{"text":"impl Copy for sa_endpoints_t","synthetic":false,"types":[]},{"text":"impl Copy for timex","synthetic":false,"types":[]},{"text":"impl Copy for ntptimeval","synthetic":false,"types":[]},{"text":"impl Copy for kevent","synthetic":false,"types":[]},{"text":"impl Copy for semid_ds","synthetic":false,"types":[]},{"text":"impl Copy for shmid_ds","synthetic":false,"types":[]},{"text":"impl Copy for proc_threadinfo","synthetic":false,"types":[]},{"text":"impl Copy for statfs","synthetic":false,"types":[]},{"text":"impl Copy for dirent","synthetic":false,"types":[]},{"text":"impl Copy for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Copy for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Copy for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Copy for utmpx","synthetic":false,"types":[]},{"text":"impl Copy for sigevent","synthetic":false,"types":[]},{"text":"impl Copy for semun","synthetic":false,"types":[]},{"text":"impl Copy for timeval32","synthetic":false,"types":[]},{"text":"impl Copy for if_data","synthetic":false,"types":[]},{"text":"impl Copy for bpf_hdr","synthetic":false,"types":[]},{"text":"impl Copy for ucontext_t","synthetic":false,"types":[]},{"text":"impl Copy for __darwin_mcontext64","synthetic":false,"types":[]},{"text":"impl Copy for __darwin_x86_exception_state64","synthetic":false,"types":[]},{"text":"impl Copy for __darwin_x86_thread_state64","synthetic":false,"types":[]},{"text":"impl Copy for __darwin_x86_float_state64","synthetic":false,"types":[]},{"text":"impl Copy for __darwin_mmst_reg","synthetic":false,"types":[]},{"text":"impl Copy for __darwin_xmm_reg","synthetic":false,"types":[]},{"text":"impl Copy for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Copy for max_align_t","synthetic":false,"types":[]},{"text":"impl Copy for in6_addr","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Copy for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Copy for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Copy for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZFlush","synthetic":false,"types":[]},{"text":"impl Copy for MZStatus","synthetic":false,"types":[]},{"text":"impl Copy for MZError","synthetic":false,"types":[]},{"text":"impl Copy for DataFormat","synthetic":false,"types":[]},{"text":"impl Copy for StreamResult","synthetic":false,"types":[]}];
implementors["nalgebra"] = [{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for X&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XY&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZ&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZW&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZWA&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for XYZWAB&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for IJKW&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M2x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M3x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M4x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M5x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x2&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x4&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x5&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar&gt; Copy for M6x6&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Dynamic","synthetic":false,"types":[]},{"text":"impl Copy for U1","synthetic":false,"types":[]},{"text":"impl Copy for U0","synthetic":false,"types":[]},{"text":"impl Copy for U2","synthetic":false,"types":[]},{"text":"impl Copy for U3","synthetic":false,"types":[]},{"text":"impl Copy for U4","synthetic":false,"types":[]},{"text":"impl Copy for U5","synthetic":false,"types":[]},{"text":"impl Copy for U6","synthetic":false,"types":[]},{"text":"impl Copy for U7","synthetic":false,"types":[]},{"text":"impl Copy for U8","synthetic":false,"types":[]},{"text":"impl Copy for U9","synthetic":false,"types":[]},{"text":"impl Copy for U10","synthetic":false,"types":[]},{"text":"impl Copy for U11","synthetic":false,"types":[]},{"text":"impl Copy for U12","synthetic":false,"types":[]},{"text":"impl Copy for U13","synthetic":false,"types":[]},{"text":"impl Copy for U14","synthetic":false,"types":[]},{"text":"impl Copy for U15","synthetic":false,"types":[]},{"text":"impl Copy for U16","synthetic":false,"types":[]},{"text":"impl Copy for U17","synthetic":false,"types":[]},{"text":"impl Copy for U18","synthetic":false,"types":[]},{"text":"impl Copy for U19","synthetic":false,"types":[]},{"text":"impl Copy for U20","synthetic":false,"types":[]},{"text":"impl Copy for U21","synthetic":false,"types":[]},{"text":"impl Copy for U22","synthetic":false,"types":[]},{"text":"impl Copy for U23","synthetic":false,"types":[]},{"text":"impl Copy for U24","synthetic":false,"types":[]},{"text":"impl Copy for U25","synthetic":false,"types":[]},{"text":"impl Copy for U26","synthetic":false,"types":[]},{"text":"impl Copy for U27","synthetic":false,"types":[]},{"text":"impl Copy for U28","synthetic":false,"types":[]},{"text":"impl Copy for U29","synthetic":false,"types":[]},{"text":"impl Copy for U30","synthetic":false,"types":[]},{"text":"impl Copy for U31","synthetic":false,"types":[]},{"text":"impl Copy for U32","synthetic":false,"types":[]},{"text":"impl Copy for U33","synthetic":false,"types":[]},{"text":"impl Copy for U34","synthetic":false,"types":[]},{"text":"impl Copy for U35","synthetic":false,"types":[]},{"text":"impl Copy for U36","synthetic":false,"types":[]},{"text":"impl Copy for U37","synthetic":false,"types":[]},{"text":"impl Copy for U38","synthetic":false,"types":[]},{"text":"impl Copy for U39","synthetic":false,"types":[]},{"text":"impl Copy for U40","synthetic":false,"types":[]},{"text":"impl Copy for U41","synthetic":false,"types":[]},{"text":"impl Copy for U42","synthetic":false,"types":[]},{"text":"impl Copy for U43","synthetic":false,"types":[]},{"text":"impl Copy for U44","synthetic":false,"types":[]},{"text":"impl Copy for U45","synthetic":false,"types":[]},{"text":"impl Copy for U46","synthetic":false,"types":[]},{"text":"impl Copy for U47","synthetic":false,"types":[]},{"text":"impl Copy for U48","synthetic":false,"types":[]},{"text":"impl Copy for U49","synthetic":false,"types":[]},{"text":"impl Copy for U50","synthetic":false,"types":[]},{"text":"impl Copy for U51","synthetic":false,"types":[]},{"text":"impl Copy for U52","synthetic":false,"types":[]},{"text":"impl Copy for U53","synthetic":false,"types":[]},{"text":"impl Copy for U54","synthetic":false,"types":[]},{"text":"impl Copy for U55","synthetic":false,"types":[]},{"text":"impl Copy for U56","synthetic":false,"types":[]},{"text":"impl Copy for U57","synthetic":false,"types":[]},{"text":"impl Copy for U58","synthetic":false,"types":[]},{"text":"impl Copy for U59","synthetic":false,"types":[]},{"text":"impl Copy for U60","synthetic":false,"types":[]},{"text":"impl Copy for U61","synthetic":false,"types":[]},{"text":"impl Copy for U62","synthetic":false,"types":[]},{"text":"impl Copy for U63","synthetic":false,"types":[]},{"text":"impl Copy for U64","synthetic":false,"types":[]},{"text":"impl Copy for U65","synthetic":false,"types":[]},{"text":"impl Copy for U66","synthetic":false,"types":[]},{"text":"impl Copy for U67","synthetic":false,"types":[]},{"text":"impl Copy for U68","synthetic":false,"types":[]},{"text":"impl Copy for U69","synthetic":false,"types":[]},{"text":"impl Copy for U70","synthetic":false,"types":[]},{"text":"impl Copy for U71","synthetic":false,"types":[]},{"text":"impl Copy for U72","synthetic":false,"types":[]},{"text":"impl Copy for U73","synthetic":false,"types":[]},{"text":"impl Copy for U74","synthetic":false,"types":[]},{"text":"impl Copy for U75","synthetic":false,"types":[]},{"text":"impl Copy for U76","synthetic":false,"types":[]},{"text":"impl Copy for U77","synthetic":false,"types":[]},{"text":"impl Copy for U78","synthetic":false,"types":[]},{"text":"impl Copy for U79","synthetic":false,"types":[]},{"text":"impl Copy for U80","synthetic":false,"types":[]},{"text":"impl Copy for U81","synthetic":false,"types":[]},{"text":"impl Copy for U82","synthetic":false,"types":[]},{"text":"impl Copy for U83","synthetic":false,"types":[]},{"text":"impl Copy for U84","synthetic":false,"types":[]},{"text":"impl Copy for U85","synthetic":false,"types":[]},{"text":"impl Copy for U86","synthetic":false,"types":[]},{"text":"impl Copy for U87","synthetic":false,"types":[]},{"text":"impl Copy for U88","synthetic":false,"types":[]},{"text":"impl Copy for U89","synthetic":false,"types":[]},{"text":"impl Copy for U90","synthetic":false,"types":[]},{"text":"impl Copy for U91","synthetic":false,"types":[]},{"text":"impl Copy for U92","synthetic":false,"types":[]},{"text":"impl Copy for U93","synthetic":false,"types":[]},{"text":"impl Copy for U94","synthetic":false,"types":[]},{"text":"impl Copy for U95","synthetic":false,"types":[]},{"text":"impl Copy for U96","synthetic":false,"types":[]},{"text":"impl Copy for U97","synthetic":false,"types":[]},{"text":"impl Copy for U98","synthetic":false,"types":[]},{"text":"impl Copy for U99","synthetic":false,"types":[]},{"text":"impl Copy for U100","synthetic":false,"types":[]},{"text":"impl Copy for U101","synthetic":false,"types":[]},{"text":"impl Copy for U102","synthetic":false,"types":[]},{"text":"impl Copy for U103","synthetic":false,"types":[]},{"text":"impl Copy for U104","synthetic":false,"types":[]},{"text":"impl Copy for U105","synthetic":false,"types":[]},{"text":"impl Copy for U106","synthetic":false,"types":[]},{"text":"impl Copy for U107","synthetic":false,"types":[]},{"text":"impl Copy for U108","synthetic":false,"types":[]},{"text":"impl Copy for U109","synthetic":false,"types":[]},{"text":"impl Copy for U110","synthetic":false,"types":[]},{"text":"impl Copy for U111","synthetic":false,"types":[]},{"text":"impl Copy for U112","synthetic":false,"types":[]},{"text":"impl Copy for U113","synthetic":false,"types":[]},{"text":"impl Copy for U114","synthetic":false,"types":[]},{"text":"impl Copy for U115","synthetic":false,"types":[]},{"text":"impl Copy for U116","synthetic":false,"types":[]},{"text":"impl Copy for U117","synthetic":false,"types":[]},{"text":"impl Copy for U118","synthetic":false,"types":[]},{"text":"impl Copy for U119","synthetic":false,"types":[]},{"text":"impl Copy for U120","synthetic":false,"types":[]},{"text":"impl Copy for U121","synthetic":false,"types":[]},{"text":"impl Copy for U122","synthetic":false,"types":[]},{"text":"impl Copy for U123","synthetic":false,"types":[]},{"text":"impl Copy for U124","synthetic":false,"types":[]},{"text":"impl Copy for U125","synthetic":false,"types":[]},{"text":"impl Copy for U126","synthetic":false,"types":[]},{"text":"impl Copy for U127","synthetic":false,"types":[]},{"text":"impl&lt;N, R, C&gt; Copy for ArrayStorage&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Value: Mul&lt;C::Value&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Prod&lt;R::Value, C::Value&gt;: ArrayLength&lt;N&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;GenericArray&lt;N, Prod&lt;R::Value, C::Value&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Scalar, R:&nbsp;Copy + Dim, C:&nbsp;Copy + Dim, S:&nbsp;Copy&gt; Copy for Matrix&lt;N, R, C, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, N:&nbsp;Scalar, R:&nbsp;Dim, C:&nbsp;Dim, RStride:&nbsp;Dim, CStride:&nbsp;Dim&gt; Copy for SliceStorage&lt;'a, N, R, C, RStride, CStride&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Unit&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + Copy, D:&nbsp;DimName&gt; Copy for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DefaultAllocator as Allocator&lt;N, D&gt;&gt;::Buffer: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + Copy, D:&nbsp;DimName&gt; Copy for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;DefaultAllocator as Allocator&lt;N, D, D&gt;&gt;::Buffer: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + Copy + SimdValue&gt; Copy for Quaternion&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + Copy, D:&nbsp;DimName&gt; Copy for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + Copy, D:&nbsp;DimName + Copy, R:&nbsp;Copy&gt; Copy for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + Copy + Zero, D:&nbsp;DimName + Copy, R:&nbsp;AbstractRotation&lt;N, D&gt; + Copy&gt; Copy for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for TGeneral","synthetic":false,"types":[]},{"text":"impl Copy for TProjective","synthetic":false,"types":[]},{"text":"impl Copy for TAffine","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimNameAdd&lt;U1&gt; + Copy, C:&nbsp;TCategory&gt; Copy for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Owned&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Copy for Orthographic3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField&gt; Copy for Perspective3&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for Bidiagonal&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DimMinimum&lt;R, C&gt;: DimSub&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N, DimMinimum&lt;R, C&gt;&gt; + Allocator&lt;N, DimDiff&lt;DimMinimum&lt;R, C&gt;, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimMinimum&lt;R, C&gt;&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimDiff&lt;DimMinimum&lt;R, C&gt;, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdComplexField, D:&nbsp;Dim&gt; Copy for Cholesky&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for FullPivLU&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;(usize, usize), DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;PermutationSequence&lt;DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + ComplexField&gt; Copy for GivensRotation&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::RealField: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;DimSub&lt;U1&gt;&gt; Copy for Hessenberg&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimDiff&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimDiff&lt;D, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for LU&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;(usize, usize), DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;PermutationSequence&lt;DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Dim&gt; Copy for PermutationSequence&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;(usize, usize), D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;(usize, usize), D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for QR&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N, DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;Dim&gt; Copy for Schur&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, R:&nbsp;DimMin&lt;C&gt;, C:&nbsp;Dim&gt; Copy for SVD&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimMinimum&lt;R, C&gt;, C&gt; + Allocator&lt;N, R, DimMinimum&lt;R, C&gt;&gt; + Allocator&lt;N::RealField, DimMinimum&lt;R, C&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, R, DimMinimum&lt;R, C&gt;&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixMN&lt;N, DimMinimum&lt;R, C&gt;, C&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N::RealField, DimMinimum&lt;R, C&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;Dim&gt; Copy for SymmetricEigen&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N::RealField, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N::RealField, D&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;ComplexField, D:&nbsp;DimSub&lt;U1&gt;&gt; Copy for SymmetricTridiagonal&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N, DimDiff&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;MatrixN&lt;N, D&gt;: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;VectorN&lt;N, DimDiff&lt;D, U1&gt;&gt;: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["ndarray"] = [{"text":"impl Copy for ErrorKind","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy&gt; Copy for Indices&lt;D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Slice","synthetic":false,"types":[]},{"text":"impl Copy for SliceOrIndex","synthetic":false,"types":[]},{"text":"impl&lt;T, D&gt; Copy for SliceInfo&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Dimension,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for FoldWhile&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AxisDescription","synthetic":false,"types":[]},{"text":"impl&lt;'a, D&gt; Copy for Axes&lt;'a, D&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Axis","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy + ?Sized&gt; Copy for Dim&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for RawViewRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ViewRepr&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;RawDataClone + Copy, D:&nbsp;Copy&gt; Copy for ArrayBase&lt;S, D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Parallel&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy&gt; Copy for Shape&lt;D&gt;","synthetic":false,"types":[]},{"text":"impl&lt;D:&nbsp;Copy&gt; Copy for StrideShape&lt;D&gt;","synthetic":false,"types":[]}];
implementors["ndarray_parallel"] = [{"text":"impl&lt;I:&nbsp;Copy&gt; Copy for Parallel&lt;I&gt;","synthetic":false,"types":[]}];
implementors["noisy_float"] = [{"text":"impl&lt;F:&nbsp;Float, C:&nbsp;FloatChecker&lt;F&gt;&gt; Copy for NoisyFloat&lt;F, C&gt;","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Copy&gt; Copy for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Copy&gt; Copy for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ParseRatioError","synthetic":false,"types":[]}];
implementors["number_prefix"] = [{"text":"impl Copy for Prefix","synthetic":false,"types":[]}];
implementors["palette"] = [{"text":"impl Copy for Equations","synthetic":false,"types":[]},{"text":"impl Copy for Equation","synthetic":false,"types":[]},{"text":"impl Copy for Parameters","synthetic":false,"types":[]},{"text":"impl Copy for Parameter","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Copy, T:&nbsp;Copy + Float&gt; Copy for PreAlpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;C:&nbsp;Copy, T:&nbsp;Copy&gt; Copy for Alpha&lt;C, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Copy for Hsl&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Copy for Hsv&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Copy for Hwb&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RgbSpace,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Copy for Lab&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Copy for Lch&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S, T&gt; Copy for Luma&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: LumaStandard,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;RgbStandard, T:&nbsp;Component&gt; Copy for Rgb&lt;S, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Copy for Xyz&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Wp, T&gt; Copy for Yxy&lt;Wp, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Component + Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Wp: WhitePoint,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Float&gt; Copy for LabHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Float&gt; Copy for RgbHue&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Srgb","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy, N:&nbsp;Copy + Number&gt; Copy for Gamma&lt;S, N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy + Number&gt; Copy for GammaFn&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl Copy for F2p2","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Copy&gt; Copy for Linear&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Copy for LinearFn","synthetic":false,"types":[]},{"text":"impl Copy for A","synthetic":false,"types":[]},{"text":"impl Copy for B","synthetic":false,"types":[]},{"text":"impl Copy for C","synthetic":false,"types":[]},{"text":"impl Copy for D50","synthetic":false,"types":[]},{"text":"impl Copy for D55","synthetic":false,"types":[]},{"text":"impl Copy for D65","synthetic":false,"types":[]},{"text":"impl Copy for D75","synthetic":false,"types":[]},{"text":"impl Copy for E","synthetic":false,"types":[]},{"text":"impl Copy for F2","synthetic":false,"types":[]},{"text":"impl Copy for F7","synthetic":false,"types":[]},{"text":"impl Copy for F11","synthetic":false,"types":[]},{"text":"impl Copy for D50Degree10","synthetic":false,"types":[]},{"text":"impl Copy for D55Degree10","synthetic":false,"types":[]},{"text":"impl Copy for D65Degree10","synthetic":false,"types":[]},{"text":"impl Copy for D75Degree10","synthetic":false,"types":[]}];
implementors["pest"] = [{"text":"impl Copy for Lookahead","synthetic":false,"types":[]},{"text":"impl Copy for Atomicity","synthetic":false,"types":[]},{"text":"impl Copy for MatchDir","synthetic":false,"types":[]},{"text":"impl Copy for Assoc","synthetic":false,"types":[]}];
implementors["pest_meta"] = [{"text":"impl Copy for RuleType","synthetic":false,"types":[]},{"text":"impl Copy for Rule","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Copy for ColorType","synthetic":false,"types":[]},{"text":"impl Copy for BitDepth","synthetic":false,"types":[]},{"text":"impl Copy for PixelDimensions","synthetic":false,"types":[]},{"text":"impl Copy for Unit","synthetic":false,"types":[]},{"text":"impl Copy for DisposeOp","synthetic":false,"types":[]},{"text":"impl Copy for BlendOp","synthetic":false,"types":[]},{"text":"impl Copy for FrameControl","synthetic":false,"types":[]},{"text":"impl Copy for AnimationControl","synthetic":false,"types":[]},{"text":"impl Copy for Transformations","synthetic":false,"types":[]},{"text":"impl Copy for Limits","synthetic":false,"types":[]},{"text":"impl Copy for FilterType","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Copy for YesS3","synthetic":false,"types":[]},{"text":"impl Copy for NoS3","synthetic":false,"types":[]},{"text":"impl Copy for YesS4","synthetic":false,"types":[]},{"text":"impl Copy for NoS4","synthetic":false,"types":[]},{"text":"impl Copy for YesA1","synthetic":false,"types":[]},{"text":"impl Copy for NoA1","synthetic":false,"types":[]},{"text":"impl Copy for YesA2","synthetic":false,"types":[]},{"text":"impl Copy for NoA2","synthetic":false,"types":[]},{"text":"impl Copy for YesNI","synthetic":false,"types":[]},{"text":"impl Copy for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Copy, S4:&nbsp;Copy, NI:&nbsp;Copy&gt; Copy for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Copy&gt; Copy for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Copy for vec128_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec256_storage","synthetic":false,"types":[]},{"text":"impl Copy for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Delimiter","synthetic":false,"types":[]},{"text":"impl Copy for Spacing","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Copy for Bernoulli","synthetic":false,"types":[]},{"text":"impl Copy for BernoulliError","synthetic":false,"types":[]},{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Cauchy","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl Copy for Exp","synthetic":false,"types":[]},{"text":"impl Copy for Gamma","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquared","synthetic":false,"types":[]},{"text":"impl Copy for FisherF","synthetic":false,"types":[]},{"text":"impl Copy for StudentT","synthetic":false,"types":[]},{"text":"impl Copy for Beta","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl Copy for Normal","synthetic":false,"types":[]},{"text":"impl Copy for LogNormal","synthetic":false,"types":[]},{"text":"impl Copy for Pareto","synthetic":false,"types":[]},{"text":"impl Copy for Poisson","synthetic":false,"types":[]},{"text":"impl Copy for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy + SampleUniform&gt; Copy for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Copy&gt; Copy for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Copy for UniformDuration","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Copy for Weibull","synthetic":false,"types":[]},{"text":"impl Copy for WeightedError","synthetic":false,"types":[]},{"text":"impl Copy for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Copy for Open01","synthetic":false,"types":[]},{"text":"impl Copy for Standard","synthetic":false,"types":[]},{"text":"impl Copy for ThreadRng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl Copy for OsRng","synthetic":false,"types":[]}];
implementors["rand_distr"] = [{"text":"impl Copy for Binomial","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Cauchy&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float + FloatConst,<br>&nbsp;&nbsp;&nbsp;&nbsp;Standard: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl Copy for Exp1","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Exp&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Gamma&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for ChiSquared&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for ChiSquaredError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for FisherF&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for FisherFError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for StudentT&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Beta&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for BetaError","synthetic":false,"types":[]},{"text":"impl Copy for StandardNormal","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Normal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for LogNormal&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Pareto&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;OpenClosed01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Pert&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;StandardNormal: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Exp1: Distribution&lt;F&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Open01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for PertError","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Poisson&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float + FloatConst,<br>&nbsp;&nbsp;&nbsp;&nbsp;Standard: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Triangular&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;Standard: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for TriangularError","synthetic":false,"types":[]},{"text":"impl Copy for UnitBall","synthetic":false,"types":[]},{"text":"impl Copy for UnitCircle","synthetic":false,"types":[]},{"text":"impl Copy for UnitDisc","synthetic":false,"types":[]},{"text":"impl Copy for UnitSphere","synthetic":false,"types":[]},{"text":"impl&lt;F:&nbsp;Copy&gt; Copy for Weibull&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Float,<br>&nbsp;&nbsp;&nbsp;&nbsp;OpenClosed01: Distribution&lt;F&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Copy for Error","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Copy for Match&lt;'t&gt;","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Copy for Span","synthetic":false,"types":[]},{"text":"impl Copy for Position","synthetic":false,"types":[]},{"text":"impl Copy for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Copy for Flag","synthetic":false,"types":[]},{"text":"impl Copy for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Copy for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Copy for Utf8Range","synthetic":false,"types":[]}];
implementors["rgb"] = [{"text":"impl&lt;ComponentType:&nbsp;Copy&gt; Copy for BGR&lt;ComponentType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ComponentType:&nbsp;Copy, AlphaComponentType:&nbsp;Copy&gt; Copy for BGRA&lt;ComponentType, AlphaComponentType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ComponentType:&nbsp;Copy&gt; Copy for Gray&lt;ComponentType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ComponentType:&nbsp;Copy, AlphaComponentType:&nbsp;Copy&gt; Copy for GrayAlpha&lt;ComponentType, AlphaComponentType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ComponentType:&nbsp;Copy&gt; Copy for RGB&lt;ComponentType&gt;","synthetic":false,"types":[]},{"text":"impl&lt;ComponentType:&nbsp;Copy, AlphaComponentType:&nbsp;Copy&gt; Copy for RGBA&lt;ComponentType, AlphaComponentType&gt;","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Copy for Buffer","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl&lt;E&gt; Copy for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Copy for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Copy for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl Copy for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Copy for Category","synthetic":false,"types":[]}];
implementors["simba"] = [{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for AutoSimd&lt;N&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Copy&gt; Copy for AutoBoolSimd&lt;N&gt;","synthetic":false,"types":[]}];
implementors["siphasher"] = [{"text":"impl Copy for SipHasher13","synthetic":false,"types":[]},{"text":"impl Copy for SipHasher24","synthetic":false,"types":[]},{"text":"impl Copy for SipHasher","synthetic":false,"types":[]},{"text":"impl Copy for Hash128","synthetic":false,"types":[]},{"text":"impl Copy for SipHasher13","synthetic":false,"types":[]},{"text":"impl Copy for SipHasher24","synthetic":false,"types":[]},{"text":"impl Copy for SipHasher","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Copy for Underscore","synthetic":false,"types":[]},{"text":"impl Copy for Abstract","synthetic":false,"types":[]},{"text":"impl Copy for As","synthetic":false,"types":[]},{"text":"impl Copy for Async","synthetic":false,"types":[]},{"text":"impl Copy for Auto","synthetic":false,"types":[]},{"text":"impl Copy for Await","synthetic":false,"types":[]},{"text":"impl Copy for Become","synthetic":false,"types":[]},{"text":"impl Copy for Box","synthetic":false,"types":[]},{"text":"impl Copy for Break","synthetic":false,"types":[]},{"text":"impl Copy for Const","synthetic":false,"types":[]},{"text":"impl Copy for Continue","synthetic":false,"types":[]},{"text":"impl Copy for Crate","synthetic":false,"types":[]},{"text":"impl Copy for Default","synthetic":false,"types":[]},{"text":"impl Copy for Do","synthetic":false,"types":[]},{"text":"impl Copy for Dyn","synthetic":false,"types":[]},{"text":"impl Copy for Else","synthetic":false,"types":[]},{"text":"impl Copy for Enum","synthetic":false,"types":[]},{"text":"impl Copy for Extern","synthetic":false,"types":[]},{"text":"impl Copy for Final","synthetic":false,"types":[]},{"text":"impl Copy for Fn","synthetic":false,"types":[]},{"text":"impl Copy for For","synthetic":false,"types":[]},{"text":"impl Copy for If","synthetic":false,"types":[]},{"text":"impl Copy for Impl","synthetic":false,"types":[]},{"text":"impl Copy for In","synthetic":false,"types":[]},{"text":"impl Copy for Let","synthetic":false,"types":[]},{"text":"impl Copy for Loop","synthetic":false,"types":[]},{"text":"impl Copy for Macro","synthetic":false,"types":[]},{"text":"impl Copy for Match","synthetic":false,"types":[]},{"text":"impl Copy for Mod","synthetic":false,"types":[]},{"text":"impl Copy for Move","synthetic":false,"types":[]},{"text":"impl Copy for Mut","synthetic":false,"types":[]},{"text":"impl Copy for Override","synthetic":false,"types":[]},{"text":"impl Copy for Priv","synthetic":false,"types":[]},{"text":"impl Copy for Pub","synthetic":false,"types":[]},{"text":"impl Copy for Ref","synthetic":false,"types":[]},{"text":"impl Copy for Return","synthetic":false,"types":[]},{"text":"impl Copy for SelfType","synthetic":false,"types":[]},{"text":"impl Copy for SelfValue","synthetic":false,"types":[]},{"text":"impl Copy for Static","synthetic":false,"types":[]},{"text":"impl Copy for Struct","synthetic":false,"types":[]},{"text":"impl Copy for Super","synthetic":false,"types":[]},{"text":"impl Copy for Trait","synthetic":false,"types":[]},{"text":"impl Copy for Try","synthetic":false,"types":[]},{"text":"impl Copy for Type","synthetic":false,"types":[]},{"text":"impl Copy for Typeof","synthetic":false,"types":[]},{"text":"impl Copy for Union","synthetic":false,"types":[]},{"text":"impl Copy for Unsafe","synthetic":false,"types":[]},{"text":"impl Copy for Unsized","synthetic":false,"types":[]},{"text":"impl Copy for Use","synthetic":false,"types":[]},{"text":"impl Copy for Virtual","synthetic":false,"types":[]},{"text":"impl Copy for Where","synthetic":false,"types":[]},{"text":"impl Copy for While","synthetic":false,"types":[]},{"text":"impl Copy for Yield","synthetic":false,"types":[]},{"text":"impl Copy for Add","synthetic":false,"types":[]},{"text":"impl Copy for AddEq","synthetic":false,"types":[]},{"text":"impl Copy for And","synthetic":false,"types":[]},{"text":"impl Copy for AndAnd","synthetic":false,"types":[]},{"text":"impl Copy for AndEq","synthetic":false,"types":[]},{"text":"impl Copy for At","synthetic":false,"types":[]},{"text":"impl Copy for Bang","synthetic":false,"types":[]},{"text":"impl Copy for Caret","synthetic":false,"types":[]},{"text":"impl Copy for CaretEq","synthetic":false,"types":[]},{"text":"impl Copy for Colon","synthetic":false,"types":[]},{"text":"impl Copy for Colon2","synthetic":false,"types":[]},{"text":"impl Copy for Comma","synthetic":false,"types":[]},{"text":"impl Copy for Div","synthetic":false,"types":[]},{"text":"impl Copy for DivEq","synthetic":false,"types":[]},{"text":"impl Copy for Dollar","synthetic":false,"types":[]},{"text":"impl Copy for Dot","synthetic":false,"types":[]},{"text":"impl Copy for Dot2","synthetic":false,"types":[]},{"text":"impl Copy for Dot3","synthetic":false,"types":[]},{"text":"impl Copy for DotDotEq","synthetic":false,"types":[]},{"text":"impl Copy for Eq","synthetic":false,"types":[]},{"text":"impl Copy for EqEq","synthetic":false,"types":[]},{"text":"impl Copy for Ge","synthetic":false,"types":[]},{"text":"impl Copy for Gt","synthetic":false,"types":[]},{"text":"impl Copy for Le","synthetic":false,"types":[]},{"text":"impl Copy for Lt","synthetic":false,"types":[]},{"text":"impl Copy for MulEq","synthetic":false,"types":[]},{"text":"impl Copy for Ne","synthetic":false,"types":[]},{"text":"impl Copy for Or","synthetic":false,"types":[]},{"text":"impl Copy for OrEq","synthetic":false,"types":[]},{"text":"impl Copy for OrOr","synthetic":false,"types":[]},{"text":"impl Copy for Pound","synthetic":false,"types":[]},{"text":"impl Copy for Question","synthetic":false,"types":[]},{"text":"impl Copy for RArrow","synthetic":false,"types":[]},{"text":"impl Copy for LArrow","synthetic":false,"types":[]},{"text":"impl Copy for Rem","synthetic":false,"types":[]},{"text":"impl Copy for RemEq","synthetic":false,"types":[]},{"text":"impl Copy for FatArrow","synthetic":false,"types":[]},{"text":"impl Copy for Semi","synthetic":false,"types":[]},{"text":"impl Copy for Shl","synthetic":false,"types":[]},{"text":"impl Copy for ShlEq","synthetic":false,"types":[]},{"text":"impl Copy for Shr","synthetic":false,"types":[]},{"text":"impl Copy for ShrEq","synthetic":false,"types":[]},{"text":"impl Copy for Star","synthetic":false,"types":[]},{"text":"impl Copy for Sub","synthetic":false,"types":[]},{"text":"impl Copy for SubEq","synthetic":false,"types":[]},{"text":"impl Copy for Tilde","synthetic":false,"types":[]},{"text":"impl Copy for Brace","synthetic":false,"types":[]},{"text":"impl Copy for Bracket","synthetic":false,"types":[]},{"text":"impl Copy for Paren","synthetic":false,"types":[]},{"text":"impl Copy for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Copy for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Copy for AttrStyle","synthetic":false,"types":[]},{"text":"impl Copy for BinOp","synthetic":false,"types":[]},{"text":"impl Copy for RangeLimits","synthetic":false,"types":[]},{"text":"impl Copy for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Copy for UnOp","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Copy for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]}];
implementors["typenum"] = [{"text":"impl Copy for B0","synthetic":false,"types":[]},{"text":"impl Copy for B1","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for PInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy + Unsigned + NonZero&gt; Copy for NInt&lt;U&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Z0","synthetic":false,"types":[]},{"text":"impl Copy for UTerm","synthetic":false,"types":[]},{"text":"impl&lt;U:&nbsp;Copy, B:&nbsp;Copy&gt; Copy for UInt&lt;U, B&gt;","synthetic":false,"types":[]},{"text":"impl Copy for ATerm","synthetic":false,"types":[]},{"text":"impl&lt;V:&nbsp;Copy, A:&nbsp;Copy&gt; Copy for TArr&lt;V, A&gt;","synthetic":false,"types":[]},{"text":"impl Copy for Greater","synthetic":false,"types":[]},{"text":"impl Copy for Less","synthetic":false,"types":[]},{"text":"impl Copy for Equal","synthetic":false,"types":[]}];
implementors["ucd_trie"] = [{"text":"impl&lt;'a&gt; Copy for TrieSetSlice&lt;'a&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()