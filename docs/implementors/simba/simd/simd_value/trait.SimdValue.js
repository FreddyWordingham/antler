(function() {var implementors = {};
implementors["nalgebra"] = [{"text":"impl&lt;N, R, C&gt; SimdValue for MatrixMN&lt;N, R, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + SimdValue,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, R, C&gt; + Allocator&lt;N::Element, R, C&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + SimdValue, D:&nbsp;DimName&gt; SimdValue for Point&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt; + Allocator&lt;N::Element, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N, D&gt; SimdValue for Rotation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Scalar + SimdValue,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D, D&gt; + Allocator&lt;N::Element, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + SimdValue&gt; SimdValue for Quaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + SimdValue&gt; SimdValue for UnitQuaternion&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField&gt; SimdValue for UnitComplex&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;Scalar + SimdValue, D:&nbsp;DimName&gt; SimdValue for Translation&lt;N, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt; + Allocator&lt;N::Element, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; SimdValue for Isometry&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: SimdValue&lt;SimdBool = N::SimdBool&gt; + AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Element: AbstractRotation&lt;N::Element, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt; + Allocator&lt;N::Element, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;SimdRealField, D:&nbsp;DimName, R&gt; SimdValue for Similarity&lt;N, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: SimdValue&lt;SimdBool = N::SimdBool&gt; + AbstractRotation&lt;N, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Element: AbstractRotation&lt;N::Element, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, D&gt; + Allocator&lt;N::Element, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N:&nbsp;RealField, D:&nbsp;DimNameAdd&lt;U1&gt;, C&gt; SimdValue for Transform&lt;N, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N::Element: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: TCategory,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N::Element, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()