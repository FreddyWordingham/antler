(function() {var implementors = {};
implementors["nalgebra"] = [{"text":"impl&lt;N1, N2, R1, C1, R2, C2&gt; SubsetOf&lt;Matrix&lt;N2, R2, C2, &lt;DefaultAllocator as Allocator&lt;N2, R2, C2&gt;&gt;::Buffer&gt;&gt; for MatrixMN&lt;N1, R1, C1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: Dim,<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: Scalar + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N2, R2, C2&gt; + Allocator&lt;N1, R1, C1&gt; + SameShapeAllocator&lt;N1, R1, C1, R2, C2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;ShapeConstraint: SameNumberOfRows&lt;R1, R2&gt; + SameNumberOfColumns&lt;C1, C2&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D&gt; SubsetOf&lt;Point&lt;N2, D&gt;&gt; for Point&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimName,<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: Scalar + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N2, D&gt; + Allocator&lt;N1, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D&gt; SubsetOf&lt;Matrix&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, U1, &lt;DefaultAllocator as Allocator&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, U1&gt;&gt;::Buffer&gt;&gt; for Point&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: Scalar + Zero + One + ClosedDiv + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName&gt; SubsetOf&lt;Rotation&lt;N2, D&gt;&gt; for Rotation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D, D&gt; + Allocator&lt;N2, D, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Unit&lt;Quaternion&lt;N2&gt;&gt;&gt; for Rotation3&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Unit&lt;Complex&lt;N2&gt;&gt;&gt; for Rotation2&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R&gt; SubsetOf&lt;Isometry&lt;N2, D, R&gt;&gt; for Rotation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, D&gt; + SupersetOf&lt;Self&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R&gt; SubsetOf&lt;Similarity&lt;N2, D, R&gt;&gt; for Rotation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, D&gt; + SupersetOf&lt;Self&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D, C&gt; SubsetOf&lt;Transform&lt;N2, D, C&gt;&gt; for Rotation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: SuperTCategoryOf&lt;TAffine&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt; + DimMin&lt;D, Output = D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D, D&gt; + Allocator&lt;N2, D, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;(usize, usize), D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D&gt; SubsetOf&lt;Matrix&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;DefaultAllocator as Allocator&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output&gt;&gt;::Buffer&gt;&gt; for Rotation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt; + DimMin&lt;D, Output = D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D, D&gt; + Allocator&lt;N2, D, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;(usize, usize), D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Quaternion&lt;N2&gt;&gt; for Quaternion&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: SimdRealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Unit&lt;Quaternion&lt;N2&gt;&gt;&gt; for UnitQuaternion&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: SimdRealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: SimdRealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Rotation&lt;N2, U3&gt;&gt; for UnitQuaternion&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, R&gt; SubsetOf&lt;Isometry&lt;N2, U3, R&gt;&gt; for UnitQuaternion&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, U3&gt; + SupersetOf&lt;Self&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, R&gt; SubsetOf&lt;Similarity&lt;N2, U3, R&gt;&gt; for UnitQuaternion&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, U3&gt; + SupersetOf&lt;Self&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, C&gt; SubsetOf&lt;Transform&lt;N2, U3, C&gt;&gt; for UnitQuaternion&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: SuperTCategoryOf&lt;TAffine&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1:&nbsp;RealField, N2:&nbsp;RealField + SupersetOf&lt;N1&gt;&gt; SubsetOf&lt;Matrix&lt;N2, U4, U4, &lt;DefaultAllocator as Allocator&lt;N2, U4, U4&gt;&gt;::Buffer&gt;&gt; for UnitQuaternion&lt;N1&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Unit&lt;Complex&lt;N2&gt;&gt;&gt; for UnitComplex&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2&gt; SubsetOf&lt;Rotation&lt;N2, U2&gt;&gt; for UnitComplex&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, R&gt; SubsetOf&lt;Isometry&lt;N2, U2, R&gt;&gt; for UnitComplex&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, U2&gt; + SupersetOf&lt;Self&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, R&gt; SubsetOf&lt;Similarity&lt;N2, U2, R&gt;&gt; for UnitComplex&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, U2&gt; + SupersetOf&lt;Self&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, C&gt; SubsetOf&lt;Transform&lt;N2, U2, C&gt;&gt; for UnitComplex&lt;N1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: SuperTCategoryOf&lt;TAffine&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1:&nbsp;RealField, N2:&nbsp;RealField + SupersetOf&lt;N1&gt;&gt; SubsetOf&lt;Matrix&lt;N2, U3, U3, &lt;DefaultAllocator as Allocator&lt;N2, U3, U3&gt;&gt;::Buffer&gt;&gt; for UnitComplex&lt;N1&gt;","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName&gt; SubsetOf&lt;Translation&lt;N2, D&gt;&gt; for Translation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: Scalar,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: Scalar + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R&gt; SubsetOf&lt;Isometry&lt;N2, D, R&gt;&gt; for Translation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R&gt; SubsetOf&lt;Similarity&lt;N2, D, R&gt;&gt; for Translation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N2, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D, C&gt; SubsetOf&lt;Transform&lt;N2, D, C&gt;&gt; for Translation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: SuperTCategoryOf&lt;TAffine&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D&gt; SubsetOf&lt;Matrix&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;DefaultAllocator as Allocator&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output&gt;&gt;::Buffer&gt;&gt; for Translation&lt;N1, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R1, R2&gt; SubsetOf&lt;Isometry&lt;N2, D, R2&gt;&gt; for Isometry&lt;N1, D, R1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;R2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: AbstractRotation&lt;N2, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R1, R2&gt; SubsetOf&lt;Similarity&lt;N2, D, R2&gt;&gt; for Isometry&lt;N1, D, R1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;R2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: AbstractRotation&lt;N2, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D, R, C&gt; SubsetOf&lt;Transform&lt;N2, D, C&gt;&gt; for Isometry&lt;N1, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: SuperTCategoryOf&lt;TAffine&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;MatrixN&lt;N1, DimNameSum&lt;D, U1&gt;&gt;&gt; + SubsetOf&lt;MatrixN&lt;N2, DimNameSum&lt;D, U1&gt;&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt; + DimMin&lt;D, Output = D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N1, D, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;(usize, usize), D&gt; + Allocator&lt;N2, D, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D, R&gt; SubsetOf&lt;Matrix&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;DefaultAllocator as Allocator&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output&gt;&gt;::Buffer&gt;&gt; for Isometry&lt;N1, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;MatrixN&lt;N1, DimNameSum&lt;D, U1&gt;&gt;&gt; + SubsetOf&lt;MatrixN&lt;N2, DimNameSum&lt;D, U1&gt;&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt; + DimMin&lt;D, Output = D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N1, D, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;(usize, usize), D&gt; + Allocator&lt;N2, D, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, R1, R2&gt; SubsetOf&lt;Similarity&lt;N2, D, R2&gt;&gt; for Similarity&lt;N1, D, R1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField + SubsetOf&lt;N2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R1: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;R2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R2: AbstractRotation&lt;N2, D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D, R, C&gt; SubsetOf&lt;Transform&lt;N2, D, C&gt;&gt; for Similarity&lt;N1, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: SuperTCategoryOf&lt;TAffine&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;MatrixN&lt;N1, DimNameSum&lt;D, U1&gt;&gt;&gt; + SubsetOf&lt;MatrixN&lt;N2, DimNameSum&lt;D, U1&gt;&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt; + DimMin&lt;D, Output = D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N1, D, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;(usize, usize), D&gt; + Allocator&lt;N2, D, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D, R&gt; SubsetOf&lt;Matrix&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;DefaultAllocator as Allocator&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output&gt;&gt;::Buffer&gt;&gt; for Similarity&lt;N1, D, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField + SupersetOf&lt;N1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: AbstractRotation&lt;N1, D&gt; + SubsetOf&lt;MatrixN&lt;N1, DimNameSum&lt;D, U1&gt;&gt;&gt; + SubsetOf&lt;MatrixN&lt;N2, DimNameSum&lt;D, U1&gt;&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt; + DimMin&lt;D, Output = D&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, D&gt; + Allocator&lt;N1, D, D&gt; + Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;(usize, usize), D&gt; + Allocator&lt;N2, D, D&gt; + Allocator&lt;N2, D&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, C1, C2&gt; SubsetOf&lt;Transform&lt;N2, D, C2&gt;&gt; for Transform&lt;N1, D, C1&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField + SubsetOf&lt;N2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;C1: TCategory,<br>&nbsp;&nbsp;&nbsp;&nbsp;C2: SuperTCategoryOf&lt;C1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N1::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;N1, N2, D:&nbsp;DimName, C&gt; SubsetOf&lt;Matrix&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;DefaultAllocator as Allocator&lt;N2, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output, &lt;D as DimNameAdd&lt;U1&gt;&gt;::Output&gt;&gt;::Buffer&gt;&gt; for Transform&lt;N1, D, C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N1: RealField + SubsetOf&lt;N2&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2: RealField,<br>&nbsp;&nbsp;&nbsp;&nbsp;C: TCategory,<br>&nbsp;&nbsp;&nbsp;&nbsp;D: DimNameAdd&lt;U1&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;DefaultAllocator: Allocator&lt;N1, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt; + Allocator&lt;N2, DimNameSum&lt;D, U1&gt;, DimNameSum&lt;D, U1&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;N1::Epsilon: Copy,<br>&nbsp;&nbsp;&nbsp;&nbsp;N2::Epsilon: Copy,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()