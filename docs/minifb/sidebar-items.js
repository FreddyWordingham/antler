initSidebarItems({"constant":[["MENU_KEY_ALT","Alt key"],["MENU_KEY_COMMAND","Command key on Mac OS"],["MENU_KEY_CTRL","Control key"],["MENU_KEY_SHIFT","Shift key"],["MENU_KEY_WIN","Windows key on Windows"]],"enum":[["CursorStyle","Different style of cursors that can be used"],["Error","Errors that can be returned from various operations"],["Key","Key is used by the get key functions to check if some keys on the keyboard has been pressed"],["KeyRepeat","Used for is_key_pressed and get_keys_pressed() to indicated if repeat of presses is wanted"],["MouseButton","The various mouse buttons that are availible"],["MouseMode","The diffrent modes that can be used to decide how mouse coordinates should be handled"],["Scale","Scale will scale the frame buffer and the window that is being sent in when calling the update function. This is useful if you for example want to display a 320 x 256 window on a screen with much higher resolution which would result in that the window is very small."],["ScaleMode","On some OS (X11 for example) it's possible a window can resize even if no resize has been set. This causes some issues depending on how the content of an input buffer should be displayed then it's possible to set this scaling mode to get a better behavior."]],"fn":[["clamp",""]],"struct":[["Menu","Menu holds info for menus"],["MenuItem","Holds info about each item in a menu"],["UnixMenu","Used on POSIX systems (Linux, FreeBSD, etc) as menus aren't supported in a native way there. This structure can be used by calling [#get_posix_menus] on Window."],["UnixMenuItem","Used on POSIX systems (Linux, FreeBSD, etc) as menus aren't supported in a native way there. This structure holds info for each item in a #UnixMenu"],["Window","Window is used to open up a window. It's possible to optionally display a 32-bit buffer when the widow is set as non-resizable."],["WindowOptions","WindowOptions is creation settings for the window. By default the settings are defined for displayng a 32-bit buffer (no scaling of window is possible)"]],"trait":[["HasRawWindowHandle","Window that wraps around a raw window handle."],["InputCallback","This trait can be implemented and set with `set_input_callback` to reieve a callback whene there is inputs incoming. Currently only support unicode chars."]],"type":[["Result",""]]});